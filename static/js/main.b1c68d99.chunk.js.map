{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/CounterButton.js","components/Header.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","username","email","robo_avatar","className","src","alt","CardList","robots","console","log","map","robot","key","id","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","CounterButton","updateCount","count","color","onClick","Header","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","initialStateSearch","initialStateRobots","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b1c68d99.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({name, username, email}) => {\n  const robo_avatar = `https://robohash.org/${name}`\n  return (  \n    <div className=\"bg-light-green dib br3 pa3 ma3 grow shadow-5\">\n      <h3>Robo Friend</h3>\n      <img src={robo_avatar} alt=\"avatar\" />\n      <p>{name}</p>\n      <p>{username}</p>\n      <p>{email}</p>\n    </div>\n  );\n}\n \nexport default Card;","import React from 'react';\nimport Card from './Card';\n\n\nconst CardList = ({robots}) => {\n  console.log('CardList');\n  return (  \n    <div>\n    {\n      robots.map(robot => (\n        <Card\n          key={robot.id}\n          name={robot.name}\n          username={robot.username}\n          email={robot.email}\n        />\n      ))\n    }\n    </div>\n  )\n}\n \nexport default CardList;","import React from 'react';\n\n\nconst SearchBox = ({searchChange}) => {\n  console.log('SearchBox')\n  return(\n    <div>\n      <input\n        className='pa3 ba b--green bg-lighttest-blue'\n        type='text'\n        placeholder='Search for a robot'\n        onChange={searchChange}\n      />\n    </div>\n  )\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n  return ( \n    <div style={{overflowY: 'scroll' , border: '5px solid black', height: '800px'}}>\n      {props.children}\n    </div>\n   );\n}\n \nexport default Scroll;","import React,  {Component} from 'react';\n\nclass ErrorBoundry extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    }\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true })\n  }\n\n  render() {\n    if(this.state.hasError) {\n      return <h1>Oops. That is not good</h1>\n    }\n    return this.props.children \n  }\n}\n\nexport default ErrorBoundry;","import React , { Component } from 'react';\n\nclass CounterButton extends Component {\n  constructor() {\n    super();\n    this.state = {\n      count: 0\n    }\n  }\n/*   shouldComponentUpdate(nextProps, nextState) {\n    if(this.state.count !== nextState.count) {\n      return true\n    }\n    return false\n  } */\n\n  updateCount = () => {\n    this.setState(state => {\n      return {count: state.count + 1 }\n    })\n  }\n  render() {\n    console.log('CounterButton')\n    return (\n      <button color={this.props.color} onClick={this.updateCount}>Count: {this.state.count}</button>\n    );\n  }\n}\n\nexport default CounterButton;","import React , { Component } from 'react';\nimport CounterButton from './CounterButton';\n\nclass Header extends Component {\n/*   shouldComponentUpdate(nextProps, nextState) {\n    return false\n  } */\n  render() {\n    console.log('Header')\n    return (\n      <div>\n        <h1 className=\"f1 \">RoboFriends</h1>\n        <CounterButton color={ 'red' } />\n      </div>\n    );\n  }\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport './App.css';\nimport { setSearchField, requestRobots } from '../actions';\nimport Header from '../components/Header';\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n}\n\nclass App extends Component {\n\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n  \n  render() {\n    const { searchField , onSearchChange, robots, isPending } = this.props;\n    const filteredRobots = robots.filter((robot) =>{\n      return robot.name.toLowerCase().includes(searchField.toLowerCase())\n    });\n    return isPending ?\n      <h1>Loading ...</h1> :       \n      (\n        <div className=\"App tc\">\n          <Header />\n          <SearchBox searchChange={onSearchChange} />\n          <Scroll>\n            <ErrorBoundry>\n              <CardList robots={filteredRobots}/>\n            </ErrorBoundry>\n          </Scroll>\n        </div>\n      ); \n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { \n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from './constants.js';\n\n// the first action is setSearchfield similar to this.setState({searchfield})\n// the input is text which the user types\n// when the user types this function will return an object(thats why the parentesis)\nexport const setSearchField = (text) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n})\n\n// action for fetch data from an API , this allows to work with actions in an asynchronous way\nexport const requestRobots = () => (dispatch) => {\n  dispatch({type: REQUEST_ROBOTS_PENDING});\n  fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n    .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\n}","// avoid errors creating constant instead of string, to catch errors \n\nexport const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\n// Request for async actions in order to work with the API\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { \n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from './constants.js';\n\n//this is the store\nconst initialStateSearch = {\n  searchField: ''\n}\n\n//First reducer, meand is helping \nexport const searchRobots = (state=initialStateSearch, action={}) => {\n  switch(action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return Object.assign({}, state, {searchField: action.payload});\n    default: \n      return state;\n  }\n}\n\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: ''\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n  switch(action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, {isPending: true})\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, {robots: action.payload, isPending: false})\n    case REQUEST_ROBOTS_FAILED: \n      return Object.assign({}, state, {error: action.payload, isPending: false})\n    default: \n      return state\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\n//import { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots , requestRobots } from './reducers';\nimport 'tachyons'\n\n//const logger = createLogger();\nconst rootReducer = combineReducers({searchRobots, requestRobots})\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}